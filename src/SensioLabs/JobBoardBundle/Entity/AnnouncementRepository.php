<?php

namespace SensioLabs\JobBoardBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Knp\Component\Pager\PaginatorInterface;

/**
 * AnnouncementRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnnouncementRepository extends EntityRepository
{
    protected $pager;

    const DEFAUTL_LIMIT=10;
    const PAGINATION_LIMIT=25;

    public function setPager(PaginatorInterface $pager)
    {
        $this->pager = $pager;
    }

    public function filterAll($filters, $page, $limit = self::DEFAUTL_LIMIT)
    {
        $qb = $this->createQueryBuilder('a');

        if (isset($filters['country'])) {
            $qb->andWhere($qb->expr()->eq('a.country', ':country'))
                ->setParameter('country', $filters['country']);
        }

        if (isset($filters['contractType'])) {
            $qb->andWhere($qb->expr()->eq('a.contractType', ':contracttype'))
                ->setParameter('contracttype', $filters['contractType']);
        }

        $qb
            ->setFirstResult($limit*($page-1))
            ->setMaxResults($limit)
            ->orderBy('a.createdAt', 'desc')
        ;

        return $qb->getQuery()->getResult();
    }

    public function findByUserPaginated(User $user, $page, $limit = self::PAGINATION_LIMIT)
    {
        $announcements = $this->findBy(['user' => $user], ['createdAt' => 'desc']);

        return $this->pager->paginate($announcements, $page, $limit);
    }

    public function getPublishedPaginatedResult($page, $limit = self::PAGINATION_LIMIT)
    {
        $qb = $this->createQueryBuilder('a');

        $qb
            ->where(
                $qb->expr()->orX(
                    $qb->expr()->andX(
                        $qb->expr()->lte('a.publishedAt', ':now'),
                        $qb->expr()->gte('a.endedAt', ':now')
                    ),
                    $qb->expr()->isNull('a.publishedAt')
                )
            )
            ->setParameter('now', new \DateTime('now'))
        ;

        return $this->pager->paginate($qb, $page, $limit);
    }

    public function getCountriesCount()
    {
        return $this->createQueryBuilder('a')
            ->select('a.country as name, COUNT(a.id) as nb_entities')
            ->groupBy('a.country')
            ->getQuery()->getArrayResult();
    }

    public function getContractTypesCount()
    {
        return $this->createQueryBuilder('a')
            ->select('a.contractType as name, COUNT(a.id) as nb_entities')
            ->groupBy('a.contractType')
            ->getQuery()->getArrayResult();
    }
}
